# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19gUMP4pb5G1P4RtJ9OfWG3A0hgbQhdbC
"""

import os
import numpy as np
import streamlit as st
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import load_img, img_to_array

# Function to predict the class of an image
def predict_image(img_path, model, class_labels, threshold=0.6):
    try:
        img = load_img(img_path, target_size=(128, 128))
        img_array = img_to_array(img)
        img_array = np.expand_dims(img_array, axis=0)
        img_array = img_array / 255.0
        predictions = model.predict(img_array)
        class_index = np.argmax(predictions)
        class_label = class_labels[class_index]
        confidence = predictions[0][class_index]
        if confidence < threshold:
            class_label = "Unknown"
        return class_label, confidence
    except Exception as e:
        st.error(f"Error predicting image: {e}")
        return None, None

# Function to load the Keras model
def load_keras_model(model_path):
    try:
        model = load_model(model_path)
        return model
    except Exception as e:
        st.error(f"Error loading model: {e}")
        return None

# Streamlit app
st.title("Weather Image Classification")

# Load the model
model_path = 'finals_model.h5'  # Update with your model path
model = load_keras_model(model_path)
class_labels = ['Rain', 'Sunrise', 'Cloudy', 'Shine', 'Unknown']

if model is not None:
    # Upload an image
    uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "png"])

    if uploaded_file is not None:
        # Save the uploaded image
        img_path = os.path.join("uploaded_image.jpg")
        with open(img_path, "wb") as f:
            f.write(uploaded_file.getbuffer())

        # Predict the class of the image
        label, confidence = predict_image(img_path, model, class_labels)

        if label is not None and confidence is not None:
            # Display the predicted class and confidence
            st.write(f"Prediction: {label}")
            st.write(f"Confidence: {confidence:.2f}")

            # Set background color based on the predicted weather class
            if label == 'Rain':
                st.markdown('<style>body {background-color: #87CEEB;}</style>', unsafe_allow_html=True)
            elif label == 'Sunrise':
                st.markdown('<style>body {background-color: #FF6347;}</style>', unsafe_allow_html=True)
            elif label == 'Cloudy':
                st.markdown('<style>body {background-color: #A9A9A9;}</style>', unsafe_allow_html=True)
            elif label == 'Shine':
                st.markdown('<style>body {background-color: #FFD700;}</style>', unsafe_allow_html=True)
            else:
                st.markdown('<style>body {background-color: #FFFFFF;}</style>', unsafe_allow_html=True)

            # Display the uploaded image
            st.image(img_path, caption='Uploaded Image', use_column_width=True)